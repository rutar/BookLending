plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacoco {
    toolVersion = "0.8.12"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'jakarta.persistence:jakarta.persistence-api'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.modelmapper:modelmapper:3.1.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0' // UI for Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-common:2.2.0' // Core functionalities
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core:4.20.0'
    implementation 'org.json:json:20230227'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'org.testcontainers:testcontainers:1.19.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.0'
    testImplementation 'org.testcontainers:postgresql:1.19.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jacocoTestReport {
    reports {
        xml.required.set(false)
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }
}


bootJar {
    archiveFileName = 'book-lending.jar'
}

// Custom task to run only unit tests
tasks.register('unitTest', Test) {
    useJUnitPlatform {
        includeTags 'unit'
    }
    finalizedBy 'jacocoTestReport'
}

// Custom task to run only integration tests
tasks.register('integrationTest', Test) {
    forkEvery = 0 // Disables forking for every test
    maxParallelForks = 1 // Limits to a single fork
    useJUnitPlatform {
        includeTags 'integration'
    }
    shouldRunAfter tasks.named('unitTest')
    finalizedBy 'jacocoTestReport'
}

// Adjust the check task dependencies
tasks.named('check') {
    dependsOn tasks.named('unitTest'), tasks.named('integrationTest')
}
